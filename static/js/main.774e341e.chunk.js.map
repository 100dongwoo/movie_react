{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","poster","genres","synopsis","App","state","_renderMovies","movies","map","movie","console","log","title_english","medium_cover_image","key","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","this","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gTA8FeA,MA9Df,YAAgD,EAAhCC,MAAgC,EAAzBC,OAAyB,EAAlBC,OAAkB,EAAXC,UCiCtBC,E,4MA1DXC,MAAQ,G,EAURC,cAAgB,WAWZ,OATe,EAAKD,MAAME,OAAOC,KAAI,SAACC,GAElC,OADAC,QAAQC,IAAIF,GACL,kBAAC,EAAD,CAAOT,MAAOS,EAAMG,cACbX,OAAQQ,EAAMI,mBACdC,IAAKL,EAAMM,GACXb,OAAQO,EAAMP,OACdC,SAAUM,EAAMN,e,EAOtCa,W,sBAAa,4BAAAC,EAAA,sEACY,EAAKC,WADjB,OACHX,EADG,OAET,EAAKY,SAAS,CACVZ,WAHK,2C,EAUbW,SAAW,WACP,OAAOE,MAAM,iEACRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKjB,UACvBkB,OAAM,SAAAC,GAAG,OAAIhB,QAAQC,IAAIe,O,kEAhC9BC,KAAKX,e,+BAmCC,IACCT,EAAQoB,KAAKtB,MAAbE,OACP,OACI,6BAAK,+EACL,yBAAKqB,UAAWrB,EAAS,MAAQ,gBAIzBoB,KAAKtB,MAAME,OAASoB,KAAKrB,gBAAkB,kB,GAnD7CuB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.774e341e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport \"./Movie.css\"\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n// class Movie extends Component {\r\n//\r\n\r\n//\r\n//     render() {\r\n//\r\n//         return (\r\n//             // <div>\r\n//             //     <MoviePoster poster={this.props.poster}/>\r\n//             //     <h1>{this.props.title}</h1>\r\n//             // </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n//\r\n// class MoviePoster extends Component {\r\n//\r\n//     render() {\r\n//         console.log(this.props)\r\n//         return(\r\n//             <img src={this.props.poster} />)\r\n//\r\n//     }\r\n//\r\n// }\r\n//\r\n\r\nfunction Movie({title, poster,genres,synopsis}) {\r\n    return (\r\n        //css에서 수정할꺼\r\n\r\n\r\n        <div classname=\"Movie\">\r\n\r\n            <div className=\"Movie_Colums\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div classNmae=\"Movie_Colums\">\r\n                <h1>{title}</h1>\r\n\r\n                <div className=\"Movie_Genres\">\r\n                    {/*//장르*/}\r\n                    {genres.map((genres,index)=> <MovieGenre genre={genres} key={index}/>)}\r\n                </div>\r\n                <div className=\"Movie_Synopsis\">\r\n                    {\r\n                        <LinesEllipsis\r\n                            text={synopsis}\r\n                            maxLine='3'\r\n                            ellipsis=' ...'\r\n                            trimRight\r\n                            basedOn='letters'\r\n                        />\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n    return (\r\n        <span className=\"Movie_Genres\">{genre} </span>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster,alt}) {\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie.Poster\"/>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt:PropTypes.string.isRequired\r\n}\r\nMovieGenre.propTypes={\r\n    genres:PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","//15 17강 한번더봐보기\nimport React, {Component} from 'react';\nimport \"./App.css\";\nimport \"./index.css\"\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n    state = {}\n// componentDidMount() {\n// setTimeout(function (){\n//     console.log(\"hello:\")\n// },1000 )\n// }\n    componentDidMount() {\n        this._getMovies();\n    }\n\n    _renderMovies = () => {\n\n        const movies = this.state.movies.map((movie) => {\n            console.log(movie)\n            return <Movie title={movie.title_english}\n                          poster={movie.medium_cover_image}\n                          key={movie.id}\n                          genres={movie.genres}\n                          synopsis={movie.synopsis}\n            />\n        })\n        return movies\n    }\n\n\n    _getMovies = async () => {  //비동기 이전작업끝나기전에 다음작업도하는거\n        const movies = await this._callApi()\n        this.setState({\n            movies\n        })\n    }\n\n//awaiㅅ callapi가 끝나기를 기달리는거 just기달리기 성공x\n\n\n    _callApi = () => {\n        return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=download_count')\n            .then(response => response.json())\n            .then(json => json.data.movies)\n            .catch(err => console.log(err))\n    }\n\n    render() {\n        const {movies}=this.state;          //???\n        return (\n            <div><h1>영화 다운로드 수   </h1>\n            <div className={movies ? \"App\" : \"App--loading\"}>\n                {/*//있나없나 하는거*/}\n\n                {\n                    this.state.movies ? this._renderMovies() : '  Loading'\n                }\n            </div></div>\n        )\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}